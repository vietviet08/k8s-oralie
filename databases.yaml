---
# PostgreSQL for Keycloak
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: oralie-system
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16.4-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: oralie-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: oralie-config
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          value: keycloak
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "keycloak"]
          initialDelaySeconds: 15
          timeoutSeconds: 45
          periodSeconds: 10
          failureThreshold: 10
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: oralie-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# MySQL for microservices
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: oralie-db
  namespace: oralie-system
spec:
  serviceName: oralie-db
  replicas: 1
  selector:
    matchLabels:
      app: oralie-db
  template:
    metadata:
      labels:
        app: oralie-db
    spec:
      containers:
      - name: oralie-db
        image: mysql:latest
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: oralie_db
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost"]
          initialDelaySeconds: 15
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 10
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-init-scripts
        configMap:
          name: mysql-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: oralie-db
  namespace: oralie-system
spec:
  selector:
    app: oralie-db
  ports:
  - port: 3306
    targetPort: 3306
---
# PgAdmin
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgadmin
  namespace: oralie-system
spec:
  serviceName: pgadmin
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:6.20
        ports:
        - containerPort: 80
        env:
        - name: PGADMIN_CONFIG_ENABLE_PROXY_HEADERS
          value: "True"
        - name: PGADMIN_CONFIG_PROXY_X_HOST_COUNT
          value: "1"
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            configMapKeyRef:
              name: oralie-config
              key: PGADMIN_DEFAULT_EMAIL
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: oralie-config
              key: PGADMIN_DEFAULT_PASSWORD
        volumeMounts:
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin
      volumes:
      - name: pgadmin-data
        persistentVolumeClaim:
          claimName: pgadmin-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: oralie-system
spec:
  selector:
    app: pgadmin
  ports:
  - port: 80
    targetPort: 80
---
# Redis
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: oralie-system
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        readinessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 15
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 10
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: oralie-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379 